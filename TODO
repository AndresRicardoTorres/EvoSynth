============================== EvoSynth 0.1 ====================================

Fehler:
	- GaussMutation: die normalverteilung stimmt noch überhaupt nicht! (Seite 281) 
		- Randomizer: gaussverteilt

	- ES überarbeiten und glatt ziehen
	- ES: mü+lambda und mu,lambda klären!

Testfälle:
	- EvoSynth::Evolvers::LocalSearch::HillclimberAcceptance
	- EvoSynth::Evolvers::LocalSearch::SimulatedAnnealingAcceptance
	- EvoSynth::Evolvers::LocalSearch::ThresholdAcceptance
	- EvoSynth::Evolvers::LocalSearch::GreatDelugeAcceptance
	- EvoSynth::Evolvers::LocalSearch::RecordToRecordTravelAcceptance

Features:

	- Jeden morgen ein paar klassen Dokumentieren!

	- was ist mit pheno/genetyp? reichen decoder oder sollte explizite
	  unterscheidung gemacht werden? Eventuell mit Prof. Weicker diskutieren

	- Algorithmen:
		- DERANDOMISIERTE-ES (Weicker page 139)
		- Mehrzieloptimierung?
		- Evolutionäres Programmieren & Genetisches Programmieren (Weicker page 139--154)
			-> Gentische Programmierung (Ruby programme wären schön)

	- CCGA, TSP und Ant example überarbeiten und eventuell toolklassen extrahieren

	- weak und strong elistism (elitären GA überarbeiten)
		=> schönen elitären meta-algorithmus als überbau für alle algorithmen

	- Bootstrap zeugs, inspiriert von OpenBEAGLE (initializer)
		=> Breeder klingt am besten (siehe ECJ)
		=> variable anzahl an eltern, kindern für recombinationen (siehe EO paper)

	- Kombinierte Operatoren:
		=> OpenBEAGLE hat ein relativ interessantes Operator Konzept:
		   (siehe: http://beagle.gel.ulaval.ca/refmanual/beagle/html/df/d5a/group__Op.html)

		=> vielleicht CombinedOperator erstellen? (method_missing magie!)
		=> was ist mit einem if-then-else CombinedOperator wie in OpenBEAGLE?
		=> CombinedMutation zu ProportionalCombinedMutation umbenennen
		=> SequentiallyCombinedMutation erstellen (alle nacheinander)
		=> analog dazu combined rekombinationen erstellen? Oder generisch?
			=> bei diesen generischen combined operatoren ist das problem der default
		   rückgabewert! (was wenn keine operation genutzt wird)
		=> ist sowas bei selektionen nützlich? eher nicht! oder doch?

	- EvoSynth:Util überarbeiten (vielleicht sollte das komplett eliminiert werden)

============================== EvoSynth >0.1 ===================================

Features:

	- Benchmarkfunktionen:
		-> C-Funktion (Weicker page 272)
		-> sämtliche mit Randbedingungen (Weicker page 274)

	- Decoder/Encoder:
		=> RealToBinary, IntegerToBinary, BinaryToInteger

	- Algorithmen:
		=> Schwärme

	- BinaryGenome mittels inline C optimieren

	- nicht reelwertige Fitnesswerte?! Da fehlt nicht viel, aber zum Beispiel
	  die Fitnessproportionale Selektion braucht die (einfach nach ".fitness" suchen)

	- Codegenerator System (z.b. für OpenBEALE und EO) -> siehe fehler!

	- Checkpointing für Evolver, Save, Stop, Restart, Continue
		=> eventuell mit Logger verknüppern

	- EvoBench: Benchmark für Evolutionäre Algorithmen
		=> mutationen, selektionen und co
		=> diversität und co

