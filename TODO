============================== generelles ======================================

			!!! Jeden morgen ein paar sachen Dokumentieren !!!

fehlende oder fehlerhafte Testfälle:

	- EvoSynth::Evolvers::LocalSearch::HillclimberAcceptance
	- EvoSynth::Evolvers::LocalSearch::SimulatedAnnealingAcceptance
	- EvoSynth::Evolvers::LocalSearch::ThresholdAcceptance
	- EvoSynth::Evolvers::LocalSearch::GreatDelugeAcceptance
	- EvoSynth::Evolvers::LocalSearch::RecordToRecordTravelAcceptance
	- EvoSynth::Mutations::SelfAdaptiveGaussMutation

============================== EvoSynth 0.1 ====================================

Features:

	- INSTALL ins englische übersetzen (rake ist optional)

	- Algorithmen:
		=> Tabu-Suche am beispiel graph colouring (164)
		=> memetischer Algorithmus (165)
		=> CMBCoevolutionary:
			-> Balance fehlt
			-> braucht ein refactoring
			-> braucht nen besseren namen: Einfach BalancedCoevolutionary würde sinn machen, oder?

	- Individuen:
		=> mittels metaprogramming memory einbauen (siehe CMB)

	- Versuchspläne und Statistiken?!

	- Probleme:
		=> GraphColouring analog zu TSP ins problems module verschieben
		=> Evaluator für benchmarkfunktionen schreiben

============================== EvoSynth >0.1 ===================================

Features:

	- add # encoding: utf-8 to all ruby files

	- TSP Problem generischer machen und refactorisieren

	- Benchmarkfunktionen:
		=> Matrix Multiplikationsproblem aus Paredis Paper (epistasis gut steuerbar)
		=> C-Funktion (Weicker page 272)
		=> sämtliche mit Randbedingungen (Weicker page 274)

	- Decoder/Encoder:
		=> RealToBinary, IntegerToBinary, BinaryToInteger

	- Algorithmen:
		=> Evolutionäres Programmieren & Genetisches Programmieren (Weicker page 139--154)
			-> Gentische Programmierung (Ruby programme wären schön)
			-> rubytree gem nutzen: http://rubytree.rubyforge.org/rdoc/index.html
		=> Schwärme
		=> neuronale Netze (gibts da ein gem für)

	- Mehrzieloptimierung:
		=> NSGA selektion (204)
		=> SPEA2, PAES (205,206)
		=> wenigstens ein Beispiel zur Mehrzieloptimierung

	- Meta-Evolver (oder metaprogramming alá Elistismus):
		=> was ist mit hall-of-fame oder ähnlichem?

	- BinaryGenome mittels inline C optimieren

	- nicht reelwertige Fitnesswerte?! Da fehlt nicht viel, aber zum Beispiel
	  die Fitnessproportionale Selektion braucht die (einfach nach ".fitness" suchen)

	- Codegenerator System (z.b. für OpenBEALE und EO) -> siehe fehler!

	- Checkpointing für Evolver, Save, Stop, Restart, Continue
		=> eventuell mit Logger verknüppern

	- EvoBench: Benchmark für Evolutionäre Algorithmen
		=> wie sollten diese Versuche ablaufen? Stichwort statistische Relevanz
		=> mutationen, selektionen und co
		=> diversität und co (binär, float, wie denn genau? mit lambda?)

	- Mehrpopulationsprobleme:
		=> was ist da noch sinnvoll? inseln & migration?

	- Logger:
		=> mehrere "Testläufe", Durchschnittswerte
		=> html output templates, svg outputs?
		=> logger sollte auch bei fitnessänderungen (der population?) getriggert werden können,
		   das geht aber vielleicht eher in richtung eventsystem

	- Bootstrap zeugs, inspiriert von OpenBEAGLE (initializer)
		=> braucht man das wirklich?
		=> Breeder klingt am besten (siehe ECJ)
		=> variable anzahl an eltern, kindern für recombinationen (siehe EO paper)